# JMH version: 1.23
# VM version: JDK 14, OpenJDK 64-Bit Server VM, 14+36
# VM invoker: /home/marschall/bin/java/zulu14.27.1-ca-jdk14-linux_x64/bin/java
# VM options: -Xmx4g -XX:MaxDirectMemorySize=512M --add-modules jdk.incubator.foreign
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 8 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.marschall.nativebytebuffers.benchmarks.LargeAllocationBenchmarks.allocateDirect
# Parameters: (allocationSize = 2097152)

# Run progress: 0.00% complete, ETA 00:09:00
# Fork: 1 of 3
WARNING: Using incubator modules: jdk.incubator.foreign
# Warmup Iteration   1: 1263.465 ±(99.9%) 113.502 us/op
# Warmup Iteration   2: 1229.514 ±(99.9%) 77.199 us/op
# Warmup Iteration   3: 1214.366 ±(99.9%) 78.441 us/op
# Warmup Iteration   4: 1219.286 ±(99.9%) 28.718 us/op
# Warmup Iteration   5: 1221.092 ±(99.9%) 47.428 us/op
Iteration   1: 1209.612 ±(99.9%) 42.812 us/op
Iteration   2: 1234.700 ±(99.9%) 37.221 us/op
Iteration   3: 1215.921 ±(99.9%) 47.609 us/op
Iteration   4: 1235.164 ±(99.9%) 30.565 us/op
Iteration   5: 1219.050 ±(99.9%) 62.046 us/op

# Run progress: 1.85% complete, ETA 00:09:10
# Fork: 2 of 3
WARNING: Using incubator modules: jdk.incubator.foreign
# Warmup Iteration   1: 1260.516 ±(99.9%) 38.800 us/op
# Warmup Iteration   2: 1232.136 ±(99.9%) 41.689 us/op
# Warmup Iteration   3: 1222.873 ±(99.9%) 31.091 us/op
# Warmup Iteration   4: 1221.538 ±(99.9%) 20.108 us/op
# Warmup Iteration   5: 1224.868 ±(99.9%) 46.207 us/op
Iteration   1: 1212.619 ±(99.9%) 20.421 us/op
Iteration   2: 1213.856 ±(99.9%) 25.975 us/op
Iteration   3: 1250.352 ±(99.9%) 22.091 us/op
Iteration   4: 1231.844 ±(99.9%) 21.083 us/op
Iteration   5: 1224.625 ±(99.9%) 41.231 us/op

# Run progress: 3.70% complete, ETA 00:08:58
# Fork: 3 of 3
WARNING: Using incubator modules: jdk.incubator.foreign
# Warmup Iteration   1: 1264.230 ±(99.9%) 43.702 us/op
# Warmup Iteration   2: 1225.503 ±(99.9%) 119.917 us/op
# Warmup Iteration   3: 1227.959 ±(99.9%) 39.205 us/op
# Warmup Iteration   4: 1223.424 ±(99.9%) 19.983 us/op
# Warmup Iteration   5: 1242.787 ±(99.9%) 15.997 us/op
Iteration   1: 1233.547 ±(99.9%) 39.457 us/op
Iteration   2: 1211.737 ±(99.9%) 24.802 us/op
Iteration   3: 1224.708 ±(99.9%) 31.752 us/op
Iteration   4: 1227.285 ±(99.9%) 37.670 us/op
Iteration   5: 1230.366 ±(99.9%) 26.441 us/op


Result "com.github.marschall.nativebytebuffers.benchmarks.LargeAllocationBenchmarks.allocateDirect":
  1225.026 ±(99.9%) 12.130 us/op [Average]
  (min, avg, max) = (1209.612, 1225.026, 1250.352), stdev = 11.346
  CI (99.9%): [1212.896, 1237.155] (assumes normal distribution)


# JMH version: 1.23
# VM version: JDK 14, OpenJDK 64-Bit Server VM, 14+36
# VM invoker: /home/marschall/bin/java/zulu14.27.1-ca-jdk14-linux_x64/bin/java
# VM options: -Xmx4g -XX:MaxDirectMemorySize=512M --add-modules jdk.incubator.foreign
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 8 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.marschall.nativebytebuffers.benchmarks.LargeAllocationBenchmarks.allocateDirect
# Parameters: (allocationSize = 16777216)

# Run progress: 5.56% complete, ETA 00:08:47
# Fork: 1 of 3
WARNING: Using incubator modules: jdk.incubator.foreign
# Warmup Iteration   1: 11042.610 ±(99.9%) 1945.894 us/op
# Warmup Iteration   2: 10858.522 ±(99.9%) 1792.844 us/op
# Warmup Iteration   3: 10944.896 ±(99.9%) 1933.104 us/op
# Warmup Iteration   4: 10880.488 ±(99.9%) 2391.841 us/op
# Warmup Iteration   5: 10781.338 ±(99.9%) 1904.406 us/op
Iteration   1: 10818.729 ±(99.9%) 1521.863 us/op
Iteration   2: 10704.445 ±(99.9%) 1863.874 us/op
Iteration   3: 10992.330 ±(99.9%) 2706.276 us/op
Iteration   4: 10813.923 ±(99.9%) 2245.324 us/op
Iteration   5: 10889.899 ±(99.9%) 2341.555 us/op

# Run progress: 7.41% complete, ETA 00:08:40
# Fork: 2 of 3
WARNING: Using incubator modules: jdk.incubator.foreign
# Warmup Iteration   1: 11143.447 ±(99.9%) 978.841 us/op
# Warmup Iteration   2: 10800.264 ±(99.9%) 1572.349 us/op
# Warmup Iteration   3: 10754.167 ±(99.9%) 1641.846 us/op
# Warmup Iteration   4: 10838.371 ±(99.9%) 1322.084 us/op
# Warmup Iteration   5: 10654.706 ±(99.9%) 1929.884 us/op
Iteration   1: 10785.282 ±(99.9%) 1719.254 us/op
Iteration   2: 10781.088 ±(99.9%) 1918.115 us/op
Iteration   3: 11345.198 ±(99.9%) 2810.773 us/op
Iteration   4: 10759.346 ±(99.9%) 1702.804 us/op
Iteration   5: 11064.491 ±(99.9%) 2480.649 us/op

# Run progress: 9.26% complete, ETA 00:08:31
# Fork: 3 of 3
WARNING: Using incubator modules: jdk.incubator.foreign
# Warmup Iteration   1: 11144.646 ±(99.9%) 1478.471 us/op
# Warmup Iteration   2: 11012.177 ±(99.9%) 1825.016 us/op
# Warmup Iteration   3: 10779.635 ±(99.9%) 2309.783 us/op
# Warmup Iteration   4: 10882.039 ±(99.9%) 2463.023 us/op
# Warmup Iteration   5: 10769.199 ±(99.9%) 1881.126 us/op
Iteration   1: 10797.691 ±(99.9%) 1678.059 us/op
Iteration   2: 11177.731 ±(99.9%) 2240.454 us/op
Iteration   3: 11089.152 ±(99.9%) 1761.792 us/op
Iteration   4: 11497.196 ±(99.9%) 2783.129 us/op
Iteration   5: 10908.163 ±(99.9%) 2080.539 us/op


Result "com.github.marschall.nativebytebuffers.benchmarks.LargeAllocationBenchmarks.allocateDirect":
  10961.644 ±(99.9%) 248.479 us/op [Average]
  (min, avg, max) = (10704.445, 10961.644, 11497.196), stdev = 232.427
  CI (99.9%): [10713.165, 11210.123] (assumes normal distribution)


# JMH version: 1.23
# VM version: JDK 14, OpenJDK 64-Bit Server VM, 14+36
# VM invoker: /home/marschall/bin/java/zulu14.27.1-ca-jdk14-linux_x64/bin/java
# VM options: -Xmx4g -XX:MaxDirectMemorySize=512M --add-modules jdk.incubator.foreign
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 8 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.marschall.nativebytebuffers.benchmarks.LargeAllocationBenchmarks.allocateNative
# Parameters: (allocationSize = 2097152)

# Run progress: 11.11% complete, ETA 00:08:22
# Fork: 1 of 3
WARNING: Using incubator modules: jdk.incubator.foreign
# Warmup Iteration   1: 542.984 ±(99.9%) 403.671 us/op
# Warmup Iteration   2: 467.539 ±(99.9%) 373.356 us/op
# Warmup Iteration   3: 523.885 ±(99.9%) 430.097 us/op
# Warmup Iteration   4: 530.553 ±(99.9%) 421.139 us/op
# Warmup Iteration   5: 535.088 ±(99.9%) 412.668 us/op
Iteration   1: 505.457 ±(99.9%) 403.536 us/op
Iteration   2: 539.478 ±(99.9%) 425.200 us/op
Iteration   3: 521.499 ±(99.9%) 429.726 us/op
Iteration   4: 514.776 ±(99.9%) 397.517 us/op
Iteration   5: 519.879 ±(99.9%) 410.135 us/op

# Run progress: 12.96% complete, ETA 00:08:10
# Fork: 2 of 3
WARNING: Using incubator modules: jdk.incubator.foreign
# Warmup Iteration   1: 493.066 ±(99.9%) 328.658 us/op
# Warmup Iteration   2: 533.066 ±(99.9%) 426.516 us/op
# Warmup Iteration   3: 521.504 ±(99.9%) 430.341 us/op
# Warmup Iteration   4: 523.558 ±(99.9%) 430.714 us/op
# Warmup Iteration   5: 518.010 ±(99.9%) 422.844 us/op
Iteration   1: 520.463 ±(99.9%) 420.244 us/op
Iteration   2: 500.220 ±(99.9%) 467.840 us/op
Iteration   3: 522.214 ±(99.9%) 423.946 us/op
Iteration   4: 543.723 ±(99.9%) 396.296 us/op
Iteration   5: 548.186 ±(99.9%) 400.282 us/op

# Run progress: 14.81% complete, ETA 00:07:59
# Fork: 3 of 3
WARNING: Using incubator modules: jdk.incubator.foreign
# Warmup Iteration   1: 499.078 ±(99.9%) 352.759 us/op
# Warmup Iteration   2: 522.399 ±(99.9%) 408.006 us/op
# Warmup Iteration   3: 522.761 ±(99.9%) 422.279 us/op
# Warmup Iteration   4: 517.726 ±(99.9%) 417.053 us/op
# Warmup Iteration   5: 540.519 ±(99.9%) 402.756 us/op
Iteration   1: 548.366 ±(99.9%) 360.679 us/op
Iteration   2: 534.607 ±(99.9%) 413.791 us/op
Iteration   3: 533.165 ±(99.9%) 414.434 us/op
Iteration   4: 552.420 ±(99.9%) 408.512 us/op
Iteration   5: 523.735 ±(99.9%) 427.372 us/op


Result "com.github.marschall.nativebytebuffers.benchmarks.LargeAllocationBenchmarks.allocateNative":
  528.546 ±(99.9%) 16.987 us/op [Average]
  (min, avg, max) = (500.220, 528.546, 552.420), stdev = 15.890
  CI (99.9%): [511.559, 545.533] (assumes normal distribution)


# JMH version: 1.23
# VM version: JDK 14, OpenJDK 64-Bit Server VM, 14+36
# VM invoker: /home/marschall/bin/java/zulu14.27.1-ca-jdk14-linux_x64/bin/java
# VM options: -Xmx4g -XX:MaxDirectMemorySize=512M --add-modules jdk.incubator.foreign
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 8 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.marschall.nativebytebuffers.benchmarks.LargeAllocationBenchmarks.allocateNative
# Parameters: (allocationSize = 16777216)

# Run progress: 16.67% complete, ETA 00:07:48
# Fork: 1 of 3
WARNING: Using incubator modules: jdk.incubator.foreign
# Warmup Iteration   1: 8066.834 ±(99.9%) 316.326 us/op
# Warmup Iteration   2: 8030.806 ±(99.9%) 57.699 us/op
# Warmup Iteration   3: 8036.235 ±(99.9%) 119.114 us/op
# Warmup Iteration   4: 8037.340 ±(99.9%) 94.258 us/op
# Warmup Iteration   5: 8029.854 ±(99.9%) 53.410 us/op
Iteration   1: 8040.505 ±(99.9%) 262.012 us/op
Iteration   2: 8033.606 ±(99.9%) 70.364 us/op
Iteration   3: 8035.013 ±(99.9%) 36.863 us/op
Iteration   4: 8033.237 ±(99.9%) 107.178 us/op
Iteration   5: 8030.921 ±(99.9%) 53.491 us/op

# Run progress: 18.52% complete, ETA 00:07:37
# Fork: 2 of 3
WARNING: Using incubator modules: jdk.incubator.foreign
# Warmup Iteration   1: 8072.551 ±(99.9%) 204.157 us/op
# Warmup Iteration   2: 8018.521 ±(99.9%) 79.019 us/op
# Warmup Iteration   3: 8034.016 ±(99.9%) 54.946 us/op
# Warmup Iteration   4: 8031.248 ±(99.9%) 60.283 us/op
# Warmup Iteration   5: 8030.777 ±(99.9%) 173.602 us/op
Iteration   1: 8037.283 ±(99.9%) 230.034 us/op
Iteration   2: 8034.426 ±(99.9%) 28.219 us/op
Iteration   3: 8038.098 ±(99.9%) 339.328 us/op
Iteration   4: 8025.358 ±(99.9%) 54.447 us/op
Iteration   5: 8031.181 ±(99.9%) 42.857 us/op

# Run progress: 20.37% complete, ETA 00:07:27
# Fork: 3 of 3
WARNING: Using incubator modules: jdk.incubator.foreign
# Warmup Iteration   1: 8090.873 ±(99.9%) 264.620 us/op
# Warmup Iteration   2: 8037.767 ±(99.9%) 168.026 us/op
# Warmup Iteration   3: 8033.947 ±(99.9%) 59.482 us/op
# Warmup Iteration   4: 8030.768 ±(99.9%) 46.379 us/op
# Warmup Iteration   5: 8032.549 ±(99.9%) 69.796 us/op
Iteration   1: 8046.414 ±(99.9%) 240.345 us/op
Iteration   2: 8031.819 ±(99.9%) 8.608 us/op
Iteration   3: 8036.384 ±(99.9%) 66.723 us/op
Iteration   4: 8018.936 ±(99.9%) 52.356 us/op
Iteration   5: 8052.797 ±(99.9%) 585.138 us/op


Result "com.github.marschall.nativebytebuffers.benchmarks.LargeAllocationBenchmarks.allocateNative":
  8035.065 ±(99.9%) 8.532 us/op [Average]
  (min, avg, max) = (8018.936, 8035.065, 8052.797), stdev = 7.981
  CI (99.9%): [8026.533, 8043.597] (assumes normal distribution)


# JMH version: 1.23
# VM version: JDK 14, OpenJDK 64-Bit Server VM, 14+36
# VM invoker: /home/marschall/bin/java/zulu14.27.1-ca-jdk14-linux_x64/bin/java
# VM options: -Xmx4g -XX:MaxDirectMemorySize=512M --add-modules jdk.incubator.foreign
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 8 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.marschall.nativebytebuffers.benchmarks.LargeAllocationBenchmarks.mmap
# Parameters: (allocationSize = 2097152)

# Run progress: 22.22% complete, ETA 00:07:16
# Fork: 1 of 3
WARNING: Using incubator modules: jdk.incubator.foreign
# Warmup Iteration   1: 21.766 ±(99.9%) 1.133 us/op
# Warmup Iteration   2: 21.877 ±(99.9%) 1.161 us/op
# Warmup Iteration   3: 20.390 ±(99.9%) 1.016 us/op
# Warmup Iteration   4: 20.364 ±(99.9%) 0.880 us/op
# Warmup Iteration   5: 20.121 ±(99.9%) 1.088 us/op
Iteration   1: 20.119 ±(99.9%) 0.796 us/op
Iteration   2: 20.217 ±(99.9%) 0.510 us/op
Iteration   3: 20.365 ±(99.9%) 0.749 us/op
Iteration   4: 20.346 ±(99.9%) 0.993 us/op
Iteration   5: 20.521 ±(99.9%) 0.518 us/op

# Run progress: 24.07% complete, ETA 00:07:06
# Fork: 2 of 3
WARNING: Using incubator modules: jdk.incubator.foreign
# Warmup Iteration   1: 21.949 ±(99.9%) 1.704 us/op
# Warmup Iteration   2: 20.915 ±(99.9%) 1.505 us/op
# Warmup Iteration   3: 20.474 ±(99.9%) 1.070 us/op
# Warmup Iteration   4: 20.691 ±(99.9%) 1.589 us/op
# Warmup Iteration   5: 20.148 ±(99.9%) 1.456 us/op
Iteration   1: 19.555 ±(99.9%) 0.541 us/op
Iteration   2: 20.059 ±(99.9%) 1.150 us/op
Iteration   3: 19.953 ±(99.9%) 1.010 us/op
Iteration   4: 20.020 ±(99.9%) 0.878 us/op
Iteration   5: 20.053 ±(99.9%) 1.155 us/op

# Run progress: 25.93% complete, ETA 00:06:55
# Fork: 3 of 3
WARNING: Using incubator modules: jdk.incubator.foreign
# Warmup Iteration   1: 21.544 ±(99.9%) 1.563 us/op
# Warmup Iteration   2: 21.616 ±(99.9%) 2.157 us/op
# Warmup Iteration   3: 21.219 ±(99.9%) 1.409 us/op
# Warmup Iteration   4: 20.872 ±(99.9%) 0.398 us/op
# Warmup Iteration   5: 20.764 ±(99.9%) 1.183 us/op
Iteration   1: 20.626 ±(99.9%) 1.191 us/op
Iteration   2: 20.827 ±(99.9%) 1.378 us/op
Iteration   3: 20.815 ±(99.9%) 1.344 us/op
Iteration   4: 20.898 ±(99.9%) 1.359 us/op
Iteration   5: 20.950 ±(99.9%) 1.093 us/op


Result "com.github.marschall.nativebytebuffers.benchmarks.LargeAllocationBenchmarks.mmap":
  20.355 ±(99.9%) 0.438 us/op [Average]
  (min, avg, max) = (19.555, 20.355, 20.950), stdev = 0.410
  CI (99.9%): [19.917, 20.793] (assumes normal distribution)


# JMH version: 1.23
# VM version: JDK 14, OpenJDK 64-Bit Server VM, 14+36
# VM invoker: /home/marschall/bin/java/zulu14.27.1-ca-jdk14-linux_x64/bin/java
# VM options: -Xmx4g -XX:MaxDirectMemorySize=512M --add-modules jdk.incubator.foreign
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 8 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.marschall.nativebytebuffers.benchmarks.LargeAllocationBenchmarks.mmap
# Parameters: (allocationSize = 16777216)

# Run progress: 27.78% complete, ETA 00:06:44
# Fork: 1 of 3
WARNING: Using incubator modules: jdk.incubator.foreign
# Warmup Iteration   1: 7486.936 ±(99.9%) 1306.441 us/op
# Warmup Iteration   2: 7421.613 ±(99.9%) 946.769 us/op
# Warmup Iteration   3: 7390.470 ±(99.9%) 927.092 us/op
# Warmup Iteration   4: 7405.313 ±(99.9%) 625.562 us/op
# Warmup Iteration   5: 7423.849 ±(99.9%) 1039.468 us/op
Iteration   1: 7491.644 ±(99.9%) 1257.580 us/op
Iteration   2: 7436.186 ±(99.9%) 726.174 us/op
Iteration   3: 7408.182 ±(99.9%) 997.215 us/op
Iteration   4: 7431.474 ±(99.9%) 907.847 us/op
Iteration   5: 8228.034 ±(99.9%) 1782.463 us/op

# Run progress: 29.63% complete, ETA 00:06:34
# Fork: 2 of 3
WARNING: Using incubator modules: jdk.incubator.foreign
# Warmup Iteration   1: 8415.395 ±(99.9%) 1080.105 us/op
# Warmup Iteration   2: 7416.319 ±(99.9%) 1096.253 us/op
# Warmup Iteration   3: 7429.722 ±(99.9%) 1415.055 us/op
# Warmup Iteration   4: 7440.188 ±(99.9%) 1115.832 us/op
# Warmup Iteration   5: 7426.912 ±(99.9%) 1310.938 us/op
Iteration   1: 7422.679 ±(99.9%) 888.178 us/op
Iteration   2: 7441.401 ±(99.9%) 947.603 us/op
Iteration   3: 7413.139 ±(99.9%) 1457.710 us/op
Iteration   4: 7472.341 ±(99.9%) 775.339 us/op
Iteration   5: 7410.324 ±(99.9%) 756.189 us/op

# Run progress: 31.48% complete, ETA 00:06:24
# Fork: 3 of 3
WARNING: Using incubator modules: jdk.incubator.foreign
# Warmup Iteration   1: 7495.549 ±(99.9%) 1251.333 us/op
# Warmup Iteration   2: 7470.113 ±(99.9%) 1111.732 us/op
# Warmup Iteration   3: 7442.663 ±(99.9%) 892.777 us/op
# Warmup Iteration   4: 7490.511 ±(99.9%) 1484.156 us/op
# Warmup Iteration   5: 7463.084 ±(99.9%) 969.624 us/op
Iteration   1: 7445.733 ±(99.9%) 1071.718 us/op
Iteration   2: 7406.471 ±(99.9%) 1031.636 us/op
Iteration   3: 7509.588 ±(99.9%) 1217.543 us/op
Iteration   4: 7443.584 ±(99.9%) 974.907 us/op
Iteration   5: 7517.929 ±(99.9%) 1433.637 us/op


Result "com.github.marschall.nativebytebuffers.benchmarks.LargeAllocationBenchmarks.mmap":
  7498.581 ±(99.9%) 219.153 us/op [Average]
  (min, avg, max) = (7406.471, 7498.581, 8228.034), stdev = 204.995
  CI (99.9%): [7279.428, 7717.733] (assumes normal distribution)


# JMH version: 1.23
# VM version: JDK 14, OpenJDK 64-Bit Server VM, 14+36
# VM invoker: /home/marschall/bin/java/zulu14.27.1-ca-jdk14-linux_x64/bin/java
# VM options: -Xmx4g -XX:MaxDirectMemorySize=512M --add-modules jdk.incubator.foreign
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 8 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.marschall.nativebytebuffers.benchmarks.SmallAllocationBenchmarks.allocateDirect
# Parameters: (allocationSize = 128)

# Run progress: 33.33% complete, ETA 00:06:13
# Fork: 1 of 3
WARNING: Using incubator modules: jdk.incubator.foreign
# Warmup Iteration   1: 4208.927 ±(99.9%) 894.370 ns/op
# Warmup Iteration   2: 4017.579 ±(99.9%) 647.458 ns/op
# Warmup Iteration   3: 26729.515 ±(99.9%) 4019.945 ns/op
# Warmup Iteration   4: 5634.906 ±(99.9%) 1087.322 ns/op
# Warmup Iteration   5: 5645.700 ±(99.9%) 1381.894 ns/op
Iteration   1: 6928.711 ±(99.9%) 2041.205 ns/op
Iteration   2: 6241.894 ±(99.9%) 1242.663 ns/op
Iteration   3: 5358.295 ±(99.9%) 237.434 ns/op
Iteration   4: 136041.798 ±(99.9%) 11707.859 ns/op
Iteration   5: 6379.816 ±(99.9%) 465.483 ns/op

# Run progress: 35.19% complete, ETA 00:06:10
# Fork: 2 of 3
WARNING: Using incubator modules: jdk.incubator.foreign
# Warmup Iteration   1: 4083.824 ±(99.9%) 856.189 ns/op
# Warmup Iteration   2: 3898.901 ±(99.9%) 700.048 ns/op
# Warmup Iteration   3: 18156.012 ±(99.9%) 6594.650 ns/op
# Warmup Iteration   4: 5759.861 ±(99.9%) 1049.204 ns/op
# Warmup Iteration   5: 5947.087 ±(99.9%) 1181.860 ns/op
Iteration   1: 7811.064 ±(99.9%) 3300.544 ns/op
Iteration   2: 6013.525 ±(99.9%) 1137.020 ns/op
Iteration   3: 6727.490 ±(99.9%) 1151.220 ns/op
Iteration   4: 11714.284 ±(99.9%) 991.915 ns/op
Iteration   5: 6179.354 ±(99.9%) 714.345 ns/op

# Run progress: 37.04% complete, ETA 00:06:02
# Fork: 3 of 3
WARNING: Using incubator modules: jdk.incubator.foreign
# Warmup Iteration   1: 4229.173 ±(99.9%) 1027.913 ns/op
# Warmup Iteration   2: 4037.168 ±(99.9%) 958.030 ns/op
# Warmup Iteration   3: 9291.145 ±(99.9%) 1497.580 ns/op
# Warmup Iteration   4: 5821.468 ±(99.9%) 691.413 ns/op
# Warmup Iteration   5: 5915.474 ±(99.9%) 1339.318 ns/op
Iteration   1: 8194.371 ±(99.9%) 4697.698 ns/op
Iteration   2: 5862.559 ±(99.9%) 1554.429 ns/op
Iteration   3: 6732.175 ±(99.9%) 979.439 ns/op
Iteration   4: 13887.189 ±(99.9%) 1364.202 ns/op
Iteration   5: 5287.283 ±(99.9%) 681.469 ns/op


Result "com.github.marschall.nativebytebuffers.benchmarks.SmallAllocationBenchmarks.allocateDirect":
  15957.321 ±(99.9%) 35605.731 ns/op [Average]
  (min, avg, max) = (5287.283, 15957.321, 136041.798), stdev = 33305.623
  CI (99.9%): [≈ 0, 51563.052] (assumes normal distribution)


# JMH version: 1.23
# VM version: JDK 14, OpenJDK 64-Bit Server VM, 14+36
# VM invoker: /home/marschall/bin/java/zulu14.27.1-ca-jdk14-linux_x64/bin/java
# VM options: -Xmx4g -XX:MaxDirectMemorySize=512M --add-modules jdk.incubator.foreign
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 8 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.marschall.nativebytebuffers.benchmarks.SmallAllocationBenchmarks.allocateDirect
# Parameters: (allocationSize = 1024)

# Run progress: 38.89% complete, ETA 00:05:52
# Fork: 1 of 3
WARNING: Using incubator modules: jdk.incubator.foreign
# Warmup Iteration   1: 9667.282 ±(99.9%) 1200.787 ns/op
# Warmup Iteration   2: 10559.383 ±(99.9%) 1829.485 ns/op
# Warmup Iteration   3: 5936.872 ±(99.9%) 878.881 ns/op
# Warmup Iteration   4: 6284.594 ±(99.9%) 840.942 ns/op
# Warmup Iteration   5: 7951.768 ±(99.9%) 1047.258 ns/op
Iteration   1: 6620.922 ±(99.9%) 526.615 ns/op
Iteration   2: 6272.618 ±(99.9%) 612.013 ns/op
Iteration   3: 6540.802 ±(99.9%) 793.772 ns/op
Iteration   4: 6755.689 ±(99.9%) 438.937 ns/op
Iteration   5: 6972.580 ±(99.9%) 1403.149 ns/op

# Run progress: 40.74% complete, ETA 00:05:41
# Fork: 2 of 3
WARNING: Using incubator modules: jdk.incubator.foreign
# Warmup Iteration   1: 8552.872 ±(99.9%) 1016.636 ns/op
# Warmup Iteration   2: 7008.731 ±(99.9%) 944.601 ns/op
# Warmup Iteration   3: 6149.947 ±(99.9%) 870.642 ns/op
# Warmup Iteration   4: 6558.922 ±(99.9%) 975.992 ns/op
# Warmup Iteration   5: 6645.242 ±(99.9%) 1198.114 ns/op
Iteration   1: 6232.871 ±(99.9%) 587.955 ns/op
Iteration   2: 6908.317 ±(99.9%) 1183.262 ns/op
Iteration   3: 6854.756 ±(99.9%) 804.162 ns/op
Iteration   4: 7617.281 ±(99.9%) 661.568 ns/op
Iteration   5: 6255.465 ±(99.9%) 540.190 ns/op

# Run progress: 42.59% complete, ETA 00:05:30
# Fork: 3 of 3
WARNING: Using incubator modules: jdk.incubator.foreign
# Warmup Iteration   1: 8626.700 ±(99.9%) 1361.490 ns/op
# Warmup Iteration   2: 7001.793 ±(99.9%) 1098.063 ns/op
# Warmup Iteration   3: 6757.825 ±(99.9%) 1005.472 ns/op
# Warmup Iteration   4: 6194.560 ±(99.9%) 970.784 ns/op
# Warmup Iteration   5: 6332.555 ±(99.9%) 1318.683 ns/op
Iteration   1: 6495.289 ±(99.9%) 1138.615 ns/op
Iteration   2: 6670.287 ±(99.9%) 924.854 ns/op
Iteration   3: 6925.088 ±(99.9%) 540.842 ns/op
Iteration   4: 7100.475 ±(99.9%) 1040.050 ns/op
Iteration   5: 6894.713 ±(99.9%) 588.755 ns/op


Result "com.github.marschall.nativebytebuffers.benchmarks.SmallAllocationBenchmarks.allocateDirect":
  6741.144 ±(99.9%) 392.026 ns/op [Average]
  (min, avg, max) = (6232.871, 6741.144, 7617.281), stdev = 366.702
  CI (99.9%): [6349.117, 7133.170] (assumes normal distribution)


# JMH version: 1.23
# VM version: JDK 14, OpenJDK 64-Bit Server VM, 14+36
# VM invoker: /home/marschall/bin/java/zulu14.27.1-ca-jdk14-linux_x64/bin/java
# VM options: -Xmx4g -XX:MaxDirectMemorySize=512M --add-modules jdk.incubator.foreign
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 8 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.marschall.nativebytebuffers.benchmarks.SmallAllocationBenchmarks.allocateDirect
# Parameters: (allocationSize = 4096)

# Run progress: 44.44% complete, ETA 00:05:19
# Fork: 1 of 3
WARNING: Using incubator modules: jdk.incubator.foreign
# Warmup Iteration   1: 7929.914 ±(99.9%) 1188.501 ns/op
# Warmup Iteration   2: 6871.510 ±(99.9%) 1036.585 ns/op
# Warmup Iteration   3: 7171.729 ±(99.9%) 527.804 ns/op
# Warmup Iteration   4: 7224.882 ±(99.9%) 787.201 ns/op
# Warmup Iteration   5: 7642.109 ±(99.9%) 955.482 ns/op
Iteration   1: 6873.827 ±(99.9%) 686.249 ns/op
Iteration   2: 7481.780 ±(99.9%) 801.025 ns/op
Iteration   3: 7636.626 ±(99.9%) 585.906 ns/op
Iteration   4: 7577.156 ±(99.9%) 776.105 ns/op
Iteration   5: 7261.377 ±(99.9%) 907.064 ns/op

# Run progress: 46.30% complete, ETA 00:05:08
# Fork: 2 of 3
WARNING: Using incubator modules: jdk.incubator.foreign
# Warmup Iteration   1: 8651.357 ±(99.9%) 668.566 ns/op
# Warmup Iteration   2: 6587.593 ±(99.9%) 634.246 ns/op
# Warmup Iteration   3: 6683.104 ±(99.9%) 878.530 ns/op
# Warmup Iteration   4: 7193.412 ±(99.9%) 706.431 ns/op
# Warmup Iteration   5: 7223.964 ±(99.9%) 619.269 ns/op
Iteration   1: 6918.549 ±(99.9%) 900.818 ns/op
Iteration   2: 7281.583 ±(99.9%) 592.901 ns/op
Iteration   3: 7244.624 ±(99.9%) 834.497 ns/op
Iteration   4: 7748.296 ±(99.9%) 1038.495 ns/op
Iteration   5: 7752.797 ±(99.9%) 992.630 ns/op

# Run progress: 48.15% complete, ETA 00:04:57
# Fork: 3 of 3
WARNING: Using incubator modules: jdk.incubator.foreign
# Warmup Iteration   1: 7985.715 ±(99.9%) 752.449 ns/op
# Warmup Iteration   2: 6483.238 ±(99.9%) 522.818 ns/op
# Warmup Iteration   3: 6992.097 ±(99.9%) 364.448 ns/op
# Warmup Iteration   4: 7155.690 ±(99.9%) 428.377 ns/op
# Warmup Iteration   5: 7160.213 ±(99.9%) 1184.682 ns/op
Iteration   1: 7450.461 ±(99.9%) 934.098 ns/op
Iteration   2: 6933.688 ±(99.9%) 691.230 ns/op
Iteration   3: 7071.724 ±(99.9%) 471.562 ns/op
Iteration   4: 7181.363 ±(99.9%) 993.781 ns/op
Iteration   5: 7559.518 ±(99.9%) 893.802 ns/op


Result "com.github.marschall.nativebytebuffers.benchmarks.SmallAllocationBenchmarks.allocateDirect":
  7331.558 ±(99.9%) 317.728 ns/op [Average]
  (min, avg, max) = (6873.827, 7331.558, 7752.797), stdev = 297.203
  CI (99.9%): [7013.830, 7649.286] (assumes normal distribution)


# JMH version: 1.23
# VM version: JDK 14, OpenJDK 64-Bit Server VM, 14+36
# VM invoker: /home/marschall/bin/java/zulu14.27.1-ca-jdk14-linux_x64/bin/java
# VM options: -Xmx4g -XX:MaxDirectMemorySize=512M --add-modules jdk.incubator.foreign
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 8 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.marschall.nativebytebuffers.benchmarks.SmallAllocationBenchmarks.allocateNative
# Parameters: (allocationSize = 128)

# Run progress: 50.00% complete, ETA 00:04:46
# Fork: 1 of 3
WARNING: Using incubator modules: jdk.incubator.foreign
# Warmup Iteration   1: 231.696 ±(99.9%) 2.935 ns/op
# Warmup Iteration   2: 222.848 ±(99.9%) 7.862 ns/op
# Warmup Iteration   3: 212.130 ±(99.9%) 4.301 ns/op
# Warmup Iteration   4: 210.361 ±(99.9%) 2.890 ns/op
# Warmup Iteration   5: 211.753 ±(99.9%) 3.641 ns/op
Iteration   1: 213.592 ±(99.9%) 8.301 ns/op
Iteration   2: 215.513 ±(99.9%) 7.962 ns/op
Iteration   3: 213.424 ±(99.9%) 1.829 ns/op
Iteration   4: 212.966 ±(99.9%) 1.521 ns/op
Iteration   5: 212.964 ±(99.9%) 1.015 ns/op

# Run progress: 51.85% complete, ETA 00:04:35
# Fork: 2 of 3
WARNING: Using incubator modules: jdk.incubator.foreign
# Warmup Iteration   1: 232.081 ±(99.9%) 4.029 ns/op
# Warmup Iteration   2: 227.177 ±(99.9%) 6.708 ns/op
# Warmup Iteration   3: 214.992 ±(99.9%) 4.425 ns/op
# Warmup Iteration   4: 211.968 ±(99.9%) 6.758 ns/op
# Warmup Iteration   5: 213.160 ±(99.9%) 12.844 ns/op
Iteration   1: 213.132 ±(99.9%) 4.484 ns/op
Iteration   2: 216.916 ±(99.9%) 9.410 ns/op
Iteration   3: 215.696 ±(99.9%) 2.967 ns/op
Iteration   4: 215.504 ±(99.9%) 2.450 ns/op
Iteration   5: 214.716 ±(99.9%) 1.525 ns/op

# Run progress: 53.70% complete, ETA 00:04:24
# Fork: 3 of 3
WARNING: Using incubator modules: jdk.incubator.foreign
# Warmup Iteration   1: 229.098 ±(99.9%) 2.059 ns/op
# Warmup Iteration   2: 221.334 ±(99.9%) 4.034 ns/op
# Warmup Iteration   3: 210.639 ±(99.9%) 3.592 ns/op
# Warmup Iteration   4: 213.047 ±(99.9%) 5.656 ns/op
# Warmup Iteration   5: 213.677 ±(99.9%) 12.777 ns/op
Iteration   1: 213.360 ±(99.9%) 1.296 ns/op
Iteration   2: 213.456 ±(99.9%) 2.702 ns/op
Iteration   3: 213.318 ±(99.9%) 1.531 ns/op
Iteration   4: 212.945 ±(99.9%) 1.977 ns/op
Iteration   5: 213.034 ±(99.9%) 1.371 ns/op


Result "com.github.marschall.nativebytebuffers.benchmarks.SmallAllocationBenchmarks.allocateNative":
  214.036 ±(99.9%) 1.371 ns/op [Average]
  (min, avg, max) = (212.945, 214.036, 216.916), stdev = 1.283
  CI (99.9%): [212.664, 215.407] (assumes normal distribution)


# JMH version: 1.23
# VM version: JDK 14, OpenJDK 64-Bit Server VM, 14+36
# VM invoker: /home/marschall/bin/java/zulu14.27.1-ca-jdk14-linux_x64/bin/java
# VM options: -Xmx4g -XX:MaxDirectMemorySize=512M --add-modules jdk.incubator.foreign
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 8 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.marschall.nativebytebuffers.benchmarks.SmallAllocationBenchmarks.allocateNative
# Parameters: (allocationSize = 1024)

# Run progress: 55.56% complete, ETA 00:04:14
# Fork: 1 of 3
WARNING: Using incubator modules: jdk.incubator.foreign
# Warmup Iteration   1: 268.428 ±(99.9%) 2.426 ns/op
# Warmup Iteration   2: 255.559 ±(99.9%) 5.377 ns/op
# Warmup Iteration   3: 248.919 ±(99.9%) 3.737 ns/op
# Warmup Iteration   4: 251.453 ±(99.9%) 13.383 ns/op
# Warmup Iteration   5: 249.682 ±(99.9%) 1.930 ns/op
Iteration   1: 249.961 ±(99.9%) 2.972 ns/op
Iteration   2: 250.479 ±(99.9%) 3.265 ns/op
Iteration   3: 250.021 ±(99.9%) 3.197 ns/op
Iteration   4: 250.482 ±(99.9%) 3.304 ns/op
Iteration   5: 250.719 ±(99.9%) 3.747 ns/op

# Run progress: 57.41% complete, ETA 00:04:03
# Fork: 2 of 3
WARNING: Using incubator modules: jdk.incubator.foreign
# Warmup Iteration   1: 270.596 ±(99.9%) 5.797 ns/op
# Warmup Iteration   2: 262.863 ±(99.9%) 12.398 ns/op
# Warmup Iteration   3: 250.349 ±(99.9%) 2.554 ns/op
# Warmup Iteration   4: 249.168 ±(99.9%) 1.475 ns/op
# Warmup Iteration   5: 251.021 ±(99.9%) 8.658 ns/op
Iteration   1: 252.874 ±(99.9%) 6.933 ns/op
Iteration   2: 250.767 ±(99.9%) 3.888 ns/op
Iteration   3: 250.681 ±(99.9%) 5.138 ns/op
Iteration   4: 250.581 ±(99.9%) 3.503 ns/op
Iteration   5: 250.582 ±(99.9%) 3.381 ns/op

# Run progress: 59.26% complete, ETA 00:03:52
# Fork: 3 of 3
WARNING: Using incubator modules: jdk.incubator.foreign
# Warmup Iteration   1: 269.992 ±(99.9%) 5.615 ns/op
# Warmup Iteration   2: 256.121 ±(99.9%) 7.364 ns/op
# Warmup Iteration   3: 249.387 ±(99.9%) 2.813 ns/op
# Warmup Iteration   4: 247.421 ±(99.9%) 1.954 ns/op
# Warmup Iteration   5: 247.845 ±(99.9%) 1.183 ns/op
Iteration   1: 247.621 ±(99.9%) 1.060 ns/op
Iteration   2: 250.704 ±(99.9%) 10.019 ns/op
Iteration   3: 249.398 ±(99.9%) 5.529 ns/op
Iteration   4: 251.621 ±(99.9%) 6.245 ns/op
Iteration   5: 248.948 ±(99.9%) 5.151 ns/op


Result "com.github.marschall.nativebytebuffers.benchmarks.SmallAllocationBenchmarks.allocateNative":
  250.363 ±(99.9%) 1.254 ns/op [Average]
  (min, avg, max) = (247.621, 250.363, 252.874), stdev = 1.173
  CI (99.9%): [249.109, 251.616] (assumes normal distribution)


# JMH version: 1.23
# VM version: JDK 14, OpenJDK 64-Bit Server VM, 14+36
# VM invoker: /home/marschall/bin/java/zulu14.27.1-ca-jdk14-linux_x64/bin/java
# VM options: -Xmx4g -XX:MaxDirectMemorySize=512M --add-modules jdk.incubator.foreign
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 8 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.marschall.nativebytebuffers.benchmarks.SmallAllocationBenchmarks.allocateNative
# Parameters: (allocationSize = 4096)

# Run progress: 61.11% complete, ETA 00:03:41
# Fork: 1 of 3
WARNING: Using incubator modules: jdk.incubator.foreign
# Warmup Iteration   1: 520.558 ±(99.9%) 54.898 ns/op
# Warmup Iteration   2: 492.533 ±(99.9%) 59.163 ns/op
# Warmup Iteration   3: 484.067 ±(99.9%) 50.965 ns/op
# Warmup Iteration   4: 483.691 ±(99.9%) 54.779 ns/op
# Warmup Iteration   5: 484.061 ±(99.9%) 52.773 ns/op
Iteration   1: 483.657 ±(99.9%) 55.571 ns/op
Iteration   2: 500.522 ±(99.9%) 47.517 ns/op
Iteration   3: 492.057 ±(99.9%) 33.048 ns/op
Iteration   4: 498.005 ±(99.9%) 24.139 ns/op
Iteration   5: 493.475 ±(99.9%) 14.118 ns/op

# Run progress: 62.96% complete, ETA 00:03:31
# Fork: 2 of 3
WARNING: Using incubator modules: jdk.incubator.foreign
# Warmup Iteration   1: 513.130 ±(99.9%) 59.729 ns/op
# Warmup Iteration   2: 499.092 ±(99.9%) 52.772 ns/op
# Warmup Iteration   3: 485.973 ±(99.9%) 54.159 ns/op
# Warmup Iteration   4: 500.856 ±(99.9%) 32.332 ns/op
# Warmup Iteration   5: 493.000 ±(99.9%) 36.129 ns/op
Iteration   1: 485.820 ±(99.9%) 55.896 ns/op
Iteration   2: 483.475 ±(99.9%) 56.897 ns/op
Iteration   3: 478.611 ±(99.9%) 61.816 ns/op
Iteration   4: 477.149 ±(99.9%) 57.426 ns/op
Iteration   5: 480.654 ±(99.9%) 62.202 ns/op

# Run progress: 64.81% complete, ETA 00:03:20
# Fork: 3 of 3
WARNING: Using incubator modules: jdk.incubator.foreign
# Warmup Iteration   1: 510.298 ±(99.9%) 57.692 ns/op
# Warmup Iteration   2: 484.157 ±(99.9%) 58.685 ns/op
# Warmup Iteration   3: 479.750 ±(99.9%) 58.159 ns/op
# Warmup Iteration   4: 477.297 ±(99.9%) 58.872 ns/op
# Warmup Iteration   5: 470.608 ±(99.9%) 54.971 ns/op
Iteration   1: 470.991 ±(99.9%) 54.687 ns/op
Iteration   2: 505.496 ±(99.9%) 29.386 ns/op
Iteration   3: 500.046 ±(99.9%) 11.507 ns/op
Iteration   4: 499.127 ±(99.9%) 11.784 ns/op
Iteration   5: 492.447 ±(99.9%) 9.060 ns/op


Result "com.github.marschall.nativebytebuffers.benchmarks.SmallAllocationBenchmarks.allocateNative":
  489.435 ±(99.9%) 10.919 ns/op [Average]
  (min, avg, max) = (470.991, 489.435, 505.496), stdev = 10.214
  CI (99.9%): [478.516, 500.355] (assumes normal distribution)


# JMH version: 1.23
# VM version: JDK 14, OpenJDK 64-Bit Server VM, 14+36
# VM invoker: /home/marschall/bin/java/zulu14.27.1-ca-jdk14-linux_x64/bin/java
# VM options: -Xmx4g -XX:MaxDirectMemorySize=512M --add-modules jdk.incubator.foreign
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 8 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.marschall.nativebytebuffers.benchmarks.SmallAllocationBenchmarks.calloc
# Parameters: (allocationSize = 128)

# Run progress: 66.67% complete, ETA 00:03:09
# Fork: 1 of 3
WARNING: Using incubator modules: jdk.incubator.foreign
# Warmup Iteration   1: 713.133 ±(99.9%) 48.634 ns/op
# Warmup Iteration   2: 690.546 ±(99.9%) 17.869 ns/op
# Warmup Iteration   3: 679.754 ±(99.9%) 12.492 ns/op
# Warmup Iteration   4: 679.555 ±(99.9%) 10.336 ns/op
# Warmup Iteration   5: 678.846 ±(99.9%) 12.419 ns/op
Iteration   1: 679.708 ±(99.9%) 10.836 ns/op
Iteration   2: 677.981 ±(99.9%) 11.208 ns/op
Iteration   3: 677.751 ±(99.9%) 10.459 ns/op
Iteration   4: 674.191 ±(99.9%) 13.917 ns/op
Iteration   5: 681.026 ±(99.9%) 22.375 ns/op

# Run progress: 68.52% complete, ETA 00:02:59
# Fork: 2 of 3
WARNING: Using incubator modules: jdk.incubator.foreign
# Warmup Iteration   1: 691.992 ±(99.9%) 49.448 ns/op
# Warmup Iteration   2: 686.665 ±(99.9%) 21.051 ns/op
# Warmup Iteration   3: 671.521 ±(99.9%) 29.060 ns/op
# Warmup Iteration   4: 677.245 ±(99.9%) 26.916 ns/op
# Warmup Iteration   5: 675.394 ±(99.9%) 24.140 ns/op
Iteration   1: 675.729 ±(99.9%) 21.929 ns/op
Iteration   2: 678.757 ±(99.9%) 26.743 ns/op
Iteration   3: 674.606 ±(99.9%) 22.982 ns/op
Iteration   4: 680.108 ±(99.9%) 25.420 ns/op
Iteration   5: 674.799 ±(99.9%) 35.455 ns/op

# Run progress: 70.37% complete, ETA 00:02:48
# Fork: 3 of 3
WARNING: Using incubator modules: jdk.incubator.foreign
# Warmup Iteration   1: 700.592 ±(99.9%) 49.326 ns/op
# Warmup Iteration   2: 689.094 ±(99.9%) 38.935 ns/op
# Warmup Iteration   3: 675.570 ±(99.9%) 44.494 ns/op
# Warmup Iteration   4: 678.545 ±(99.9%) 43.248 ns/op
# Warmup Iteration   5: 681.694 ±(99.9%) 38.928 ns/op
Iteration   1: 685.583 ±(99.9%) 61.448 ns/op
Iteration   2: 679.221 ±(99.9%) 39.766 ns/op
Iteration   3: 678.448 ±(99.9%) 39.135 ns/op
Iteration   4: 678.386 ±(99.9%) 39.206 ns/op
Iteration   5: 677.704 ±(99.9%) 35.995 ns/op


Result "com.github.marschall.nativebytebuffers.benchmarks.SmallAllocationBenchmarks.calloc":
  678.267 ±(99.9%) 3.090 ns/op [Average]
  (min, avg, max) = (674.191, 678.267, 685.583), stdev = 2.890
  CI (99.9%): [675.177, 681.356] (assumes normal distribution)


# JMH version: 1.23
# VM version: JDK 14, OpenJDK 64-Bit Server VM, 14+36
# VM invoker: /home/marschall/bin/java/zulu14.27.1-ca-jdk14-linux_x64/bin/java
# VM options: -Xmx4g -XX:MaxDirectMemorySize=512M --add-modules jdk.incubator.foreign
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 8 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.marschall.nativebytebuffers.benchmarks.SmallAllocationBenchmarks.calloc
# Parameters: (allocationSize = 1024)

# Run progress: 72.22% complete, ETA 00:02:37
# Fork: 1 of 3
WARNING: Using incubator modules: jdk.incubator.foreign
# Warmup Iteration   1: 708.862 ±(99.9%) 47.280 ns/op
# Warmup Iteration   2: 694.488 ±(99.9%) 41.131 ns/op
# Warmup Iteration   3: 678.431 ±(99.9%) 45.819 ns/op
# Warmup Iteration   4: 676.735 ±(99.9%) 47.889 ns/op
# Warmup Iteration   5: 676.571 ±(99.9%) 46.724 ns/op
Iteration   1: 678.659 ±(99.9%) 51.146 ns/op
Iteration   2: 686.005 ±(99.9%) 32.979 ns/op
Iteration   3: 680.590 ±(99.9%) 21.439 ns/op
Iteration   4: 681.754 ±(99.9%) 16.537 ns/op
Iteration   5: 684.165 ±(99.9%) 16.776 ns/op

# Run progress: 74.07% complete, ETA 00:02:27
# Fork: 2 of 3
WARNING: Using incubator modules: jdk.incubator.foreign
# Warmup Iteration   1: 702.767 ±(99.9%) 54.047 ns/op
# Warmup Iteration   2: 678.029 ±(99.9%) 53.606 ns/op
# Warmup Iteration   3: 674.278 ±(99.9%) 55.281 ns/op
# Warmup Iteration   4: 676.761 ±(99.9%) 52.946 ns/op
# Warmup Iteration   5: 672.873 ±(99.9%) 50.977 ns/op
Iteration   1: 674.222 ±(99.9%) 50.029 ns/op
Iteration   2: 686.583 ±(99.9%) 23.473 ns/op
Iteration   3: 670.241 ±(99.9%) 31.710 ns/op
Iteration   4: 669.131 ±(99.9%) 23.860 ns/op
Iteration   5: 667.987 ±(99.9%) 24.468 ns/op

# Run progress: 75.93% complete, ETA 00:02:16
# Fork: 3 of 3
WARNING: Using incubator modules: jdk.incubator.foreign
# Warmup Iteration   1: 704.898 ±(99.9%) 51.400 ns/op
# Warmup Iteration   2: 688.971 ±(99.9%) 50.882 ns/op
# Warmup Iteration   3: 683.234 ±(99.9%) 53.707 ns/op
# Warmup Iteration   4: 685.764 ±(99.9%) 63.677 ns/op
# Warmup Iteration   5: 682.162 ±(99.9%) 55.757 ns/op
Iteration   1: 673.005 ±(99.9%) 56.178 ns/op
Iteration   2: 691.375 ±(99.9%) 42.668 ns/op
Iteration   3: 689.693 ±(99.9%) 33.371 ns/op
Iteration   4: 683.676 ±(99.9%) 38.276 ns/op
Iteration   5: 686.643 ±(99.9%) 39.450 ns/op


Result "com.github.marschall.nativebytebuffers.benchmarks.SmallAllocationBenchmarks.calloc":
  680.248 ±(99.9%) 8.192 ns/op [Average]
  (min, avg, max) = (667.987, 680.248, 691.375), stdev = 7.663
  CI (99.9%): [672.057, 688.440] (assumes normal distribution)


# JMH version: 1.23
# VM version: JDK 14, OpenJDK 64-Bit Server VM, 14+36
# VM invoker: /home/marschall/bin/java/zulu14.27.1-ca-jdk14-linux_x64/bin/java
# VM options: -Xmx4g -XX:MaxDirectMemorySize=512M --add-modules jdk.incubator.foreign
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 8 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.marschall.nativebytebuffers.benchmarks.SmallAllocationBenchmarks.calloc
# Parameters: (allocationSize = 4096)

# Run progress: 77.78% complete, ETA 00:02:06
# Fork: 1 of 3
WARNING: Using incubator modules: jdk.incubator.foreign
# Warmup Iteration   1: 785.376 ±(99.9%) 57.010 ns/op
# Warmup Iteration   2: 758.375 ±(99.9%) 48.865 ns/op
# Warmup Iteration   3: 746.282 ±(99.9%) 56.543 ns/op
# Warmup Iteration   4: 737.891 ±(99.9%) 52.496 ns/op
# Warmup Iteration   5: 743.666 ±(99.9%) 46.725 ns/op
Iteration   1: 747.080 ±(99.9%) 56.573 ns/op
Iteration   2: 737.914 ±(99.9%) 61.045 ns/op
Iteration   3: 737.465 ±(99.9%) 59.575 ns/op
Iteration   4: 738.238 ±(99.9%) 63.532 ns/op
Iteration   5: 736.822 ±(99.9%) 60.019 ns/op

# Run progress: 79.63% complete, ETA 00:01:55
# Fork: 2 of 3
WARNING: Using incubator modules: jdk.incubator.foreign
# Warmup Iteration   1: 844.899 ±(99.9%) 65.765 ns/op
# Warmup Iteration   2: 813.884 ±(99.9%) 64.646 ns/op
# Warmup Iteration   3: 799.696 ±(99.9%) 85.965 ns/op
# Warmup Iteration   4: 802.733 ±(99.9%) 81.239 ns/op
# Warmup Iteration   5: 796.363 ±(99.9%) 76.284 ns/op
Iteration   1: 790.672 ±(99.9%) 65.488 ns/op
Iteration   2: 809.800 ±(99.9%) 78.951 ns/op
Iteration   3: 803.878 ±(99.9%) 72.415 ns/op
Iteration   4: 826.589 ±(99.9%) 75.274 ns/op
Iteration   5: 815.972 ±(99.9%) 56.844 ns/op

# Run progress: 81.48% complete, ETA 00:01:44
# Fork: 3 of 3
WARNING: Using incubator modules: jdk.incubator.foreign
# Warmup Iteration   1: 784.427 ±(99.9%) 83.199 ns/op
# Warmup Iteration   2: 748.763 ±(99.9%) 62.693 ns/op
# Warmup Iteration   3: 738.306 ±(99.9%) 58.768 ns/op
# Warmup Iteration   4: 734.492 ±(99.9%) 63.853 ns/op
# Warmup Iteration   5: 735.622 ±(99.9%) 65.218 ns/op
Iteration   1: 739.209 ±(99.9%) 59.598 ns/op
Iteration   2: 737.619 ±(99.9%) 64.154 ns/op
Iteration   3: 748.171 ±(99.9%) 53.222 ns/op
Iteration   4: 744.609 ±(99.9%) 55.715 ns/op
Iteration   5: 752.777 ±(99.9%) 73.818 ns/op


Result "com.github.marschall.nativebytebuffers.benchmarks.SmallAllocationBenchmarks.calloc":
  764.454 ±(99.9%) 36.311 ns/op [Average]
  (min, avg, max) = (736.822, 764.454, 826.589), stdev = 33.965
  CI (99.9%): [728.144, 800.765] (assumes normal distribution)


# JMH version: 1.23
# VM version: JDK 14, OpenJDK 64-Bit Server VM, 14+36
# VM invoker: /home/marschall/bin/java/zulu14.27.1-ca-jdk14-linux_x64/bin/java
# VM options: -Xmx4g -XX:MaxDirectMemorySize=512M --add-modules jdk.incubator.foreign
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 8 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.marschall.nativebytebuffers.benchmarks.SmallAllocationBenchmarks.malloc
# Parameters: (allocationSize = 128)

# Run progress: 83.33% complete, ETA 00:01:34
# Fork: 1 of 3
WARNING: Using incubator modules: jdk.incubator.foreign
# Warmup Iteration   1: 572.166 ±(99.9%) 5.316 ns/op
# Warmup Iteration   2: 549.615 ±(99.9%) 13.654 ns/op
# Warmup Iteration   3: 533.122 ±(99.9%) 6.612 ns/op
# Warmup Iteration   4: 529.025 ±(99.9%) 4.861 ns/op
# Warmup Iteration   5: 533.818 ±(99.9%) 19.076 ns/op
Iteration   1: 529.324 ±(99.9%) 4.632 ns/op
Iteration   2: 527.844 ±(99.9%) 3.201 ns/op
Iteration   3: 528.519 ±(99.9%) 1.115 ns/op
Iteration   4: 528.412 ±(99.9%) 5.198 ns/op
Iteration   5: 528.184 ±(99.9%) 1.924 ns/op

# Run progress: 85.19% complete, ETA 00:01:23
# Fork: 2 of 3
WARNING: Using incubator modules: jdk.incubator.foreign
# Warmup Iteration   1: 565.292 ±(99.9%) 9.561 ns/op
# Warmup Iteration   2: 534.243 ±(99.9%) 4.359 ns/op
# Warmup Iteration   3: 537.912 ±(99.9%) 7.449 ns/op
# Warmup Iteration   4: 534.932 ±(99.9%) 1.561 ns/op
# Warmup Iteration   5: 537.935 ±(99.9%) 12.286 ns/op
Iteration   1: 540.061 ±(99.9%) 18.402 ns/op
Iteration   2: 533.286 ±(99.9%) 0.871 ns/op
Iteration   3: 534.749 ±(99.9%) 2.921 ns/op
Iteration   4: 534.216 ±(99.9%) 0.928 ns/op
Iteration   5: 533.939 ±(99.9%) 2.381 ns/op

# Run progress: 87.04% complete, ETA 00:01:13
# Fork: 3 of 3
WARNING: Using incubator modules: jdk.incubator.foreign
# Warmup Iteration   1: 577.753 ±(99.9%) 13.985 ns/op
# Warmup Iteration   2: 559.221 ±(99.9%) 3.691 ns/op
# Warmup Iteration   3: 539.549 ±(99.9%) 1.559 ns/op
# Warmup Iteration   4: 544.488 ±(99.9%) 19.446 ns/op
# Warmup Iteration   5: 548.722 ±(99.9%) 29.144 ns/op
Iteration   1: 542.380 ±(99.9%) 3.908 ns/op
Iteration   2: 541.968 ±(99.9%) 4.138 ns/op
Iteration   3: 542.005 ±(99.9%) 4.409 ns/op
Iteration   4: 542.108 ±(99.9%) 2.530 ns/op
Iteration   5: 540.538 ±(99.9%) 9.265 ns/op


Result "com.github.marschall.nativebytebuffers.benchmarks.SmallAllocationBenchmarks.malloc":
  535.169 ±(99.9%) 6.250 ns/op [Average]
  (min, avg, max) = (527.844, 535.169, 542.380), stdev = 5.846
  CI (99.9%): [528.919, 541.419] (assumes normal distribution)


# JMH version: 1.23
# VM version: JDK 14, OpenJDK 64-Bit Server VM, 14+36
# VM invoker: /home/marschall/bin/java/zulu14.27.1-ca-jdk14-linux_x64/bin/java
# VM options: -Xmx4g -XX:MaxDirectMemorySize=512M --add-modules jdk.incubator.foreign
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 8 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.marschall.nativebytebuffers.benchmarks.SmallAllocationBenchmarks.malloc
# Parameters: (allocationSize = 1024)

# Run progress: 88.89% complete, ETA 00:01:02
# Fork: 1 of 3
WARNING: Using incubator modules: jdk.incubator.foreign
# Warmup Iteration   1: 561.310 ±(99.9%) 7.653 ns/op
# Warmup Iteration   2: 542.766 ±(99.9%) 4.840 ns/op
# Warmup Iteration   3: 529.994 ±(99.9%) 4.825 ns/op
# Warmup Iteration   4: 523.687 ±(99.9%) 1.984 ns/op
# Warmup Iteration   5: 526.698 ±(99.9%) 13.370 ns/op
Iteration   1: 527.593 ±(99.9%) 15.346 ns/op
Iteration   2: 522.228 ±(99.9%) 0.756 ns/op
Iteration   3: 523.046 ±(99.9%) 1.979 ns/op
Iteration   4: 522.942 ±(99.9%) 1.553 ns/op
Iteration   5: 522.673 ±(99.9%) 2.305 ns/op

# Run progress: 90.74% complete, ETA 00:00:52
# Fork: 2 of 3
WARNING: Using incubator modules: jdk.incubator.foreign
# Warmup Iteration   1: 564.059 ±(99.9%) 8.049 ns/op
# Warmup Iteration   2: 540.092 ±(99.9%) 9.495 ns/op
# Warmup Iteration   3: 531.390 ±(99.9%) 5.727 ns/op
# Warmup Iteration   4: 532.828 ±(99.9%) 17.439 ns/op
# Warmup Iteration   5: 537.840 ±(99.9%) 17.279 ns/op
Iteration   1: 530.016 ±(99.9%) 3.075 ns/op
Iteration   2: 528.779 ±(99.9%) 5.494 ns/op
Iteration   3: 529.210 ±(99.9%) 3.803 ns/op
Iteration   4: 529.570 ±(99.9%) 4.707 ns/op
Iteration   5: 529.192 ±(99.9%) 1.833 ns/op

# Run progress: 92.59% complete, ETA 00:00:41
# Fork: 3 of 3
WARNING: Using incubator modules: jdk.incubator.foreign
# Warmup Iteration   1: 587.207 ±(99.9%) 45.249 ns/op
# Warmup Iteration   2: 540.174 ±(99.9%) 3.718 ns/op
# Warmup Iteration   3: 536.948 ±(99.9%) 12.859 ns/op
# Warmup Iteration   4: 534.925 ±(99.9%) 6.122 ns/op
# Warmup Iteration   5: 535.792 ±(99.9%) 11.876 ns/op
Iteration   1: 538.715 ±(99.9%) 26.219 ns/op
Iteration   2: 535.654 ±(99.9%) 4.222 ns/op
Iteration   3: 534.916 ±(99.9%) 4.348 ns/op
Iteration   4: 538.081 ±(99.9%) 17.528 ns/op
Iteration   5: 532.599 ±(99.9%) 1.570 ns/op


Result "com.github.marschall.nativebytebuffers.benchmarks.SmallAllocationBenchmarks.malloc":
  529.681 ±(99.9%) 5.881 ns/op [Average]
  (min, avg, max) = (522.228, 529.681, 538.715), stdev = 5.501
  CI (99.9%): [523.800, 535.562] (assumes normal distribution)


# JMH version: 1.23
# VM version: JDK 14, OpenJDK 64-Bit Server VM, 14+36
# VM invoker: /home/marschall/bin/java/zulu14.27.1-ca-jdk14-linux_x64/bin/java
# VM options: -Xmx4g -XX:MaxDirectMemorySize=512M --add-modules jdk.incubator.foreign
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 8 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.github.marschall.nativebytebuffers.benchmarks.SmallAllocationBenchmarks.malloc
# Parameters: (allocationSize = 4096)

# Run progress: 94.44% complete, ETA 00:00:31
# Fork: 1 of 3
WARNING: Using incubator modules: jdk.incubator.foreign
# Warmup Iteration   1: 685.514 ±(99.9%) 38.418 ns/op
# Warmup Iteration   2: 656.286 ±(99.9%) 30.042 ns/op
# Warmup Iteration   3: 650.100 ±(99.9%) 36.992 ns/op
# Warmup Iteration   4: 651.693 ±(99.9%) 38.667 ns/op
# Warmup Iteration   5: 650.364 ±(99.9%) 48.802 ns/op
Iteration   1: 650.185 ±(99.9%) 34.682 ns/op
Iteration   2: 649.101 ±(99.9%) 27.303 ns/op
Iteration   3: 647.432 ±(99.9%) 29.574 ns/op
Iteration   4: 646.728 ±(99.9%) 32.483 ns/op
Iteration   5: 645.105 ±(99.9%) 27.399 ns/op

# Run progress: 96.30% complete, ETA 00:00:20
# Fork: 2 of 3
WARNING: Using incubator modules: jdk.incubator.foreign
# Warmup Iteration   1: 646.694 ±(99.9%) 42.350 ns/op
# Warmup Iteration   2: 619.408 ±(99.9%) 43.469 ns/op
# Warmup Iteration   3: 618.894 ±(99.9%) 55.164 ns/op
# Warmup Iteration   4: 615.747 ±(99.9%) 53.665 ns/op
# Warmup Iteration   5: 620.276 ±(99.9%) 50.478 ns/op
Iteration   1: 643.757 ±(99.9%) 14.526 ns/op
Iteration   2: 647.238 ±(99.9%) 13.003 ns/op
Iteration   3: 640.431 ±(99.9%) 14.539 ns/op
Iteration   4: 645.479 ±(99.9%) 13.324 ns/op
Iteration   5: 640.917 ±(99.9%) 14.582 ns/op

# Run progress: 98.15% complete, ETA 00:00:10
# Fork: 3 of 3
WARNING: Using incubator modules: jdk.incubator.foreign
# Warmup Iteration   1: 674.015 ±(99.9%) 47.942 ns/op
# Warmup Iteration   2: 643.108 ±(99.9%) 51.281 ns/op
# Warmup Iteration   3: 633.781 ±(99.9%) 47.893 ns/op
# Warmup Iteration   4: 637.613 ±(99.9%) 43.984 ns/op
# Warmup Iteration   5: 638.253 ±(99.9%) 63.567 ns/op
Iteration   1: 654.517 ±(99.9%) 26.629 ns/op
Iteration   2: 647.371 ±(99.9%) 17.524 ns/op
Iteration   3: 649.127 ±(99.9%) 15.070 ns/op
Iteration   4: 648.379 ±(99.9%) 17.886 ns/op
Iteration   5: 646.086 ±(99.9%) 16.307 ns/op


Result "com.github.marschall.nativebytebuffers.benchmarks.SmallAllocationBenchmarks.malloc":
  646.790 ±(99.9%) 3.776 ns/op [Average]
  (min, avg, max) = (640.431, 646.790, 654.517), stdev = 3.533
  CI (99.9%): [643.014, 650.567] (assumes normal distribution)


# Run complete. Total time: 00:09:24

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                 (allocationSize)  Mode  Cnt      Score       Error  Units
LargeAllocationBenchmarks.allocateDirect           2097152  avgt   15   1225.026 ±    12.130  us/op
LargeAllocationBenchmarks.allocateDirect          16777216  avgt   15  10961.644 ±   248.479  us/op
LargeAllocationBenchmarks.allocateNative           2097152  avgt   15    528.546 ±    16.987  us/op
LargeAllocationBenchmarks.allocateNative          16777216  avgt   15   8035.065 ±     8.532  us/op
LargeAllocationBenchmarks.mmap                     2097152  avgt   15     20.355 ±     0.438  us/op
LargeAllocationBenchmarks.mmap                    16777216  avgt   15   7498.581 ±   219.153  us/op
SmallAllocationBenchmarks.allocateDirect               128  avgt   15  15957.321 ± 35605.731  ns/op
SmallAllocationBenchmarks.allocateDirect              1024  avgt   15   6741.144 ±   392.026  ns/op
SmallAllocationBenchmarks.allocateDirect              4096  avgt   15   7331.558 ±   317.728  ns/op
SmallAllocationBenchmarks.allocateNative               128  avgt   15    214.036 ±     1.371  ns/op
SmallAllocationBenchmarks.allocateNative              1024  avgt   15    250.363 ±     1.254  ns/op
SmallAllocationBenchmarks.allocateNative              4096  avgt   15    489.435 ±    10.919  ns/op
SmallAllocationBenchmarks.calloc                       128  avgt   15    678.267 ±     3.090  ns/op
SmallAllocationBenchmarks.calloc                      1024  avgt   15    680.248 ±     8.192  ns/op
SmallAllocationBenchmarks.calloc                      4096  avgt   15    764.454 ±    36.311  ns/op
SmallAllocationBenchmarks.malloc                       128  avgt   15    535.169 ±     6.250  ns/op
SmallAllocationBenchmarks.malloc                      1024  avgt   15    529.681 ±     5.881  ns/op
SmallAllocationBenchmarks.malloc                      4096  avgt   15    646.790 ±     3.776  ns/op

Benchmark result is saved to jmh-result.text
